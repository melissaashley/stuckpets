"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * param - search param
 */
var param = '';
/**
 * name - array data
 */

var namesArray = ['amber', 'jane', 'jessica', 'mary', 'baby', 'bae', 'bai', 'bby', 'angel', 'sweet', 'care', 'bear', 'cat', 'queen', 'princess', 'jess', 'danny', 'daniel', 'emma', 'babe', 'sophia', 'mia', 'amelia', 'emily', 'melissa', 'ella', 'elizabeth', 'sofia', 'victoria', 'vicky', 'luna', 'grace', 'zoe', 'zoey', 'lily', 'lilly', 'hanna', 'hannah', 'natalie', 'violet', 'pink', 'purple', 'audrey', 'aurora', 'claire', 'lucy', 'anna', 'anne', 'willow', 'elena', 'joey', 'ivy', 'alex', 'alexa', 'sophie', 'maria', 'faith', 'rose', 'alexandra', 'ashley', 'andrea', 'maria', 'jasmine', 'izzy', 'isabel', 'alyssa', 'ariel', 'molly', 'morgan', 'kim', 'kimberely', 'gwen', 'lauren', 'laura', 'elise', 'alexis', 'fog', 'london', 'blood', 'scary', 'blue', 'dead', 'death', 'sienna', 'gracie', 'josie', 'mya', 'kathy', 'cathie', 'brooke', 'summer', 'sunny', 'sun', 'moon', 'danielle', 'amy', 'rebecca', 'nicole', 'nicky', 'nikky', 'lola', 'lila', 'vanessa', 'june', 'juliet', 'tess', 'tessa', 'samara', 'michelle', 'ruth', 'kamila', 'olivia', 'kate', 'katie', 'dragon', 'lady', 'girl'];
/**
 * DOM
 */

var paramSubmit = document.getElementById('paramSubmit');
var stopSearch = document.getElementById('stop');
var results = document.getElementById('results');
var localResults = document.getElementById('local');
var clearButton = document.createElement('button');
/**
 * generateList - generate the list based off the search term
 */

paramSubmit.addEventListener("submit", generateList);

function generateList(event) {
  event.preventDefault();
  clearList(); // Get the value of the field

  var paramSub = document.getElementById('param');
  param = paramSub.value;
  setLocalStorage(param);
  getLocalStorage();
  returnResults(param);
}
/**
 * clearList - remove past results
 */


function clearList() {
  results.innerHTML = '';
}

stopSearch.addEventListener("click", stopIt);

function stopIt(event) {
  event.preventDefault();
  clearList();
  window.stop(); // weird? but okay - the images don't load anymore
}
/**
 * returnResults - return the list on the page
 */


function returnResults(param) {
  var appendType = document.getElementById('appendType').value;
  var betweenType = document.getElementById('betweenType').value;
  var generatedArray;
  var numbersArray;
  var numberCount = 1000;
  var selectVal = parseInt(appendType);

  switch (appendType) {
    case 'names':
      numbersArray = namesArray;
      break;

    case 'random':
      numbersArray = Array.from({
        length: numberCount
      }, function () {
        return Math.floor(Math.random() * 10000);
      });
      break;

    case 'randomH':
      numbersArray = Array.from({
        length: numberCount
      }, function () {
        return Math.floor(Math.random() * 100000);
      });
      break;

    default:
      numbersArray = Array.from({
        length: numberCount
      }, function (v, k) {
        return k + selectVal;
      });
  }

  generatedArray = numbersArray;

  var _iterator = _createForOfIteratorHelper(generatedArray),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var eachItem = _step.value;
      var item = "<a href=\"http://neopets.com/~".concat(param).concat(betweenType).concat(eachItem, "\" target=\"_blank\"><img src=\"http://pets.neopets.com/cpn/").concat(param).concat(betweenType).concat(eachItem, "/1/1.png\"></a>");
      results.innerHTML += item;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
/**
 * setLocalStorage - set the items in local storage
 */


function setLocalStorage(param) {
  var previousStorage = localStorage.getItem('searchedStrings');
  var updatedStorage = previousStorage ? previousStorage + ', ' + param : param;
  localStorage.setItem('searchedStrings', updatedStorage);
}
/**
 * getLocalStorage - get the items in local storage
 */


function getLocalStorage(param) {
  var storage = localStorage.getItem('searchedStrings');

  if (storage !== null) {
    localResults.innerHTML = 'Past search strings: ' + storage;
    localResults.appendChild(clearButton);
  }
}
/**
 * clearButton - generate the list based off the search term
 */


clearButton.innerText = 'Clear History';
clearButton.classList.add('clear-btn');
clearButton.addEventListener("click", clearHistory);

function clearHistory(event) {
  event.preventDefault();
  localResults.innerHTML = '';
  localStorage.removeItem('searchedStrings');
}

getLocalStorage();
//# sourceMappingURL=app.min.js.map
